import os
from . import dirs
from . import conf
from . import env

def recreate():
    fn=dirs.blddir / 'setup.sh'

    extra_binpath=':'.join(env.env['system']['runtime']['extra_bin_path'])
    if extra_binpath:
        extra_binpath+=":"

    t="""#!/usr/bin/env bash

###############################################################################################################
# Autogenerated file which clients can source in order to use the installed software
#
ESS_DGBUILD_TMP_THIS_DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [ "x${<pn>_INSTALL_PREFIX}" != "x${ESS_DGBUILD_TMP_THIS_DIR}" ]; then

    if [ ! -z "$<pn>_INSTALL_PREFIX" ]; then
        ############################################################################
        # Undo effect of sourcing setup file in different location
        function prunepath() {
            if [ "x${!1:-}" != "x" ]; then
                P=$(IFS=:;for p in ${!1:-}; do [[ $p != ${2}* ]] && echo -n ":$p"; done)
                export $1="${P:1:99999}"
            fi
        }
        prunepath PATH "${<pn>_INSTALL_PREFIX}"
        prunepath PYTHONPATH "${<pn>_INSTALL_PREFIX}"
        prunepath NCRYSTAL_DATA_PATH "${<pn>_INSTALL_PREFIX}"
    fi

  ###############################################################################################################
  # Set environment variables which clients can incorporate in their setup (Makefiles etc.):
  export <pn>_INSTALL_PREFIX="${ESS_DGBUILD_TMP_THIS_DIR}"
  export <pn>_INCLUDE_DIR="${ESS_DGBUILD_TMP_THIS_DIR}/include"
  export <pn>_LIB_DIR="${ESS_DGBUILD_TMP_THIS_DIR}/lib"
  export <pn>_DATA_DIR="${ESS_DGBUILD_TMP_THIS_DIR}/data"
  export <pn>_TESTREF_DIR="${ESS_DGBUILD_TMP_THIS_DIR}/tests/testref"
  export SBLD_INSTALL_PREFIX="${ESS_DGBUILD_TMP_THIS_DIR}"
  export SBLD_INCLUDE_DIR="${ESS_DGBUILD_TMP_THIS_DIR}/include"
  export SBLD_LIB_DIR="${ESS_DGBUILD_TMP_THIS_DIR}/lib"
  export SBLD_DATA_DIR="${ESS_DGBUILD_TMP_THIS_DIR}/data"
  export SBLD_TESTREF_DIR="${ESS_DGBUILD_TMP_THIS_DIR}/tests/testref"

  ###############################################################################################################
  # Modify global path variables for our executables, scripts, libraries, python modules, etc. to be available:
  export PATH="${ESS_DGBUILD_TMP_THIS_DIR}/sysbin:${ESS_DGBUILD_TMP_THIS_DIR}/bin:${ESS_DGBUILD_TMP_THIS_DIR}/scripts:%s$PATH"
  export PYTHONPATH="${ESS_DGBUILD_TMP_THIS_DIR}/python:$PYTHONPATH"
  export NCRYSTAL_DATA_PATH="${ESS_DGBUILD_TMP_THIS_DIR}/data:${NCRYSTAL_DATA_PATH}"
fi

#Cleanup:
ESS_DGBUILD_TMP_THIS_DIR=
unset ESS_DGBUILD_TMP_THIS_DIR

"""
    t=(t%extra_binpath).replace('<pn>',conf.projectname)
    #only write file if contents have changed
    fh=open(fn) if os.path.exists(fn) else None
    if fh and t==fh.read():
        fh.close()
        return
    if fh:
        fh.close()
    fh=open(fn,'w')
    fh.write(t)
    fh.close()

def recreate_unsetup():
    t="""#!/usr/bin/env bash

###############################################################################################################
# Autogenerated file which clients can source in order to undo the effect of sourcing setup.sh
#
ESS_DGBUILD_TMP_THIS_DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [ "x${<pn>_INSTALL_PREFIX}" == "x${ESS_DGBUILD_TMP_THIS_DIR}" ]; then

    if [ ! -z "$<pn>_INSTALL_PREFIX" ]; then
        ############################################################################
        # Undo effect of sourcing setup file in different location
        function prunepath() {
            if [ "x${!1:-}" != "x" ]; then
                P=$(IFS=:;for p in ${!1:-}; do [[ $p != ${2}* ]] && echo -n ":$p"; done)
                export $1="${P:1:99999}"
            fi
        }
        prunepath PATH "${<pn>_INSTALL_PREFIX}"
        prunepath PYTHONPATH "${<pn>_INSTALL_PREFIX}"
        prunepath NCRYSTAL_DATA_PATH "${<pn>_INSTALL_PREFIX}"
    fi

    unset <pn>_INSTALL_PREFIX
    unset <pn>_INCLUDE_DIR
    unset <pn>_LIB_DIR
    unset <pn>_DATA_DIR
    unset <pn>_TESTREF_DIR
    unset SBLD_INSTALL_PREFIX
    unset SBLD_INCLUDE_DIR
    unset SBLD_LIB_DIR
    unset SBLD_DATA_DIR
    unset SBLD_TESTREF_DIR

fi

#Cleanup:
ESS_DGBUILD_TMP_THIS_DIR=
unset ESS_DGBUILD_TMP_THIS_DIR

""".replace('<pn>',conf.projectname)
    #only write file if contents have changed
    f = dirs.blddir / 'unsetup.sh'
    if not f.exists() or f.read_text()!=t:
        assert f.parent.is_dir()
        f.write_text(t)
